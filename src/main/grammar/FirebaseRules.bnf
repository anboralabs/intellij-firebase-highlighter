// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="co.anbora.labs.firebase.lang.core.parser.FirebaseRulesParser"
  parserUtilClass="co.anbora.labs.firebase.lang.core.parser.FirebaseParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="FirebaseRules"
  psiImplClassSuffix="Impl"
  psiPackage="co.anbora.labs.firebase.lang.core.psi"
  psiImplPackage="co.anbora.labs.firebase.lang.core.psi.impl"

  elementTypeHolderClass="co.anbora.labs.firebase.lang.core.psi.FirebaseRulesTypes"
  elementTypeClass="co.anbora.labs.firebase.lang.core.psi.FirebaseElementType"
  tokenTypeClass="co.anbora.labs.firebase.lang.core.psi.FirebaseTokenType"

  tokens = [
          WHITE_SPACE='WHITE_SPACE'
          LP = '('
          RP = ')'
          LB = '['
          RB = ']'
          number='regexp:\d+(\.\d*)?'
          string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
          op = '->'
          COLON = ':'
          COMMA = ','
          EQ = '='
          DOT = '.'
          char = 'regexp:[\n\r\u2028\u2029]'
          LINE_COMMENT='LINE_COMMENT'
          BLOCK_COMMENT='BLOCK_COMMENT'
      ]

}

root ::= root_item

private root_item ::= !<<eof>> property

property ::= RuleVersionStatement? (FunctionStatement)* ServiceStatement

RuleVersionStatement ::= RULES_VERSION EQ VERSIONS DOT_COMMA

ServiceStatement ::= SERVICE_KEYWORD SERVICE_NAME LEFT_BRACE (MatchStatement)+ RIGHT_BRACE

MatchStatement ::= MATCH_KEYWORD FullPathStatement LEFT_BRACE (AllowStatement|MatchStatement|FunctionStatement)+ RIGHT_BRACE

FullPathStatement ::= (SLASH PathStatement)+

PathStatement ::= (IDENTIFIER|PATH_VARIABLE)

AllowStatement ::= ALLOW_KEYWORD PermissionStatement COLON ConditionalStatement DOT_COMMA

PermissionKeyWord ::= (GET_KEYWORD|READ_KEYWORD|WRITE_KEYWORD|LIST_KEYWORD
                            |CREATE_KEYWORD|UPDATE_KEYWORD|DELETE_KEYWORD)

PermissionStatement ::= PermissionKeyWord (COMMA PermissionKeyWord)*

ConditionalStatement ::= IF_KEYWORD ConditionalExpression

ConditionalExpression ::= Expression (BooleanOperator Expression)*

ObjectStatement ::= IDENTIFIER(DOT IDENTIFIER)*

ObjectMethodCallStatement ::= (ArrayLiteralStatement (DOT IDENTIFIER)*|ObjectStatement)FunctionParameterStatement

CallFunctionStatement ::= ObjectMethodCallStatement (DOT ObjectMethodCallStatement)*

FunctionDeclarationStatement ::= IDENTIFIER FunctionParameterStatement

FunctionParameterStatement ::= LP ParameterStatement? RP

ParameterStatement ::= Expression(COMMA Expression)*

FullBuiltInParameterStatement ::= (SLASH PathBuiltInParameterStatement)+

PathBuiltInParameterStatement ::= (IDENTIFIER|PATH_BUILT_IN)

GetBuiltInFunctionStatement ::= GET_KEYWORD LP FullBuiltInParameterStatement RP (DOT IDENTIFIER)*

ExistBuiltInFunctionStatement ::= EXITS_KEYWORD LP FullBuiltInParameterStatement RP

BuiltInFunctionStatement ::= (GetBuiltInFunctionStatement|ExistBuiltInFunctionStatement)

FunctionStatement ::= FUNCTION_KEYWORD FunctionDeclarationStatement LEFT_BRACE ReturnStatement RIGHT_BRACE

ReturnStatement ::= RETURN_KEYWORD ConditionalExpression DOT_COMMA

Expression ::= BooleanStatement
        | BuiltInFunctionStatement
        | CallFunctionStatement
        | ObjectStatement
        | LiteralStatement
        | NullStatement
        | ArrayLiteralStatement
        | ParenthesizedExpression
        | NegatedExpression

ParenthesizedExpression ::=
    LP ConditionalExpression RP

NegatedExpression ::=
    NEGATE Expression

ArrayLiteralStatement ::= LB (ParameterStatement|ArrayLiteralStatement) RB

LiteralStatement ::= (NumberLiteralStatement|StringLiteralStatement)

NumberLiteralStatement ::= number (NumberOperator number)*

StringLiteralStatement ::= string (StringOperator string)*

StringOperator ::= (PLUS_OP|MULT_OP)

NumberOperator ::= (PLUS_OP|MINUS_OP|MULT_OP|SLASH)

NullStatement ::= NULL_KEYWORD

BooleanOperator ::= (EQEQ|NE|OROR|ANDAND|LT|LE|GT|GE|IN_KEYWORD)

BooleanStatement ::= (TRUE_KEYWORD|FALSE_KEYWORD)
